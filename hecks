#! /bin/env python3

import curses
import curses.ascii
from enum import auto, Enum
import sys
import os
import traceback


# ========================================
#
# Number base.


class EditorNumberBase(Enum):

    BINARY = auto()
    OCTAL = auto()
    DECIMAL = auto()
    HEXIDECIMAL = auto()


NUMBER_BASES = {
    EditorNumberBase.BINARY: {
        "digits": "01",
        "base": 2,
        "max_length": 8,
    },
    EditorNumberBase.OCTAL: {
        "digits": "01234567",
        "base": 8,
        "max_length": 3,
    },
    EditorNumberBase.DECIMAL: {
        "digits": "0123456789",
        "base": 10,
        "max_length": 3,
    },
    EditorNumberBase.HEXIDECIMAL: {
        "digits": "0123456789abcdef",
        "base": 16,
        "max_length": 2,
    },
}


# ========================================
#
# Interface focus.


class EditorFocus(Enum):

    EDIT_BYTES = auto()
    EDIT_ASCII = auto()
    EDIT_CAPTURE_KEY = auto()
    SELECT_NUMBER_BASE = auto()
    SEARCH = auto()
    GOTO_BYTE = auto()
    CONFIRM_EXIT = auto()
    CONFIRM_READ_FILE = auto()
    CONFIRM_WRITE_FILE = auto()


# ========================================
#
# Editor.


class EditorResetFocus(Exception):

    pass


class EditorPopFocus(Exception):

    pass


class EditorReplaceFocus(Exception):

    pass


class Editor:

    def __init__(self, path):
        # IO.
        self.path = path
        self.last_modification_time = os.path.getmtime(path)

        self.bytes = []

        self.modified = False

        self.readFile(force=True)

        # Config.
        self.bytes_per_row = 16

        # Curses.
        self.is_alive = True

        self.scr = curses.initscr()

        self.scr.keypad(True)

        curses.noecho()
        curses.raw()

        curses.start_color()
        curses.use_default_colors()

        curses.init_pair(1, curses.COLOR_BLUE, -1) # Borders.
        curses.init_pair(2, curses.COLOR_RED, -1) # Unprintable.
        curses.init_pair(3, curses.COLOR_BLUE, -1) # Text entry.
        curses.init_pair(4, -1, curses.COLOR_YELLOW) # Search term.

        self.terminal_size = (1, 1)
        self.terminal_too_small = True

        # Input state.
        self.key = ""
        self.key_ord = 0

        # Edit state.
        self.scroll_offset = 0

        self.edit_cursor_row = 0
        self.edit_cursor_col = 0

        self.edit_byte_index = 0
        self.edit_overwrite = True

        # Byte editing.
        self.number_base = EditorNumberBase.HEXIDECIMAL

        # Interface focus.
        self.focus_stack = []
        self.focus = None

        self.focus_funcs = {
            EditorFocus.EDIT_BYTES: self.focusEditBytes,
            EditorFocus.EDIT_ASCII: self.focusEditAscii,
            EditorFocus.EDIT_CAPTURE_KEY: self.focusEditCaptureKey,
            EditorFocus.SELECT_NUMBER_BASE: self.focusSelectNumberBase,
            EditorFocus.SEARCH: self.focusSearch,
            EditorFocus.GOTO_BYTE: self.focusGotoByte,
            EditorFocus.CONFIRM_EXIT: self.focusConfirmExit,
            EditorFocus.CONFIRM_READ_FILE: self.focusConfirmReadFile,
            EditorFocus.CONFIRM_WRITE_FILE: self.focusConfirmWriteFile,
        }

        # EditorFocus.EDIT_BYTES or EditorFocus.EDIT_ASCII
        self.last_edit_focus = None

        # Text entry.
        self.text_prompt = ""
        self.text_entry = ""
        self.text_notify = ""

        # Search.

        # [[byte_index_first, byte_index_last]]
        self.search_results = []

        # Inital refresh.
        self.resize()

    def deinit(self):
        self.scr.keypad(False)
        curses.echo()
        curses.noraw()

        curses.endwin()

    # File read/write.
    def readFile(self, force=False):
        if self.modified and not force:
            self.pushFocus(EditorFocus.CONFIRM_READ_FILE, "Buffer has been modified, overwrite? (y=overwrite, press any other key to cancel): ")
            return

        if force or not self.modified:
            f = open(self.path, "rb")
            self.bytes = list(f.read())
            f.close()

            self.modified = False
            self.last_modification_time = os.path.getmtime(self.path)

            self.textEntryNotify(f"Read file {self.path}")

    def writeFile(self, force=False):
        modified_externally = os.path.getmtime(self.path) > self.last_modification_time

        if modified_externally and not force:
            self.pushFocus(EditorFocus.CONFIRM_WRITE_FILE, "File has been modified externally, overwrite? (y=overwrite, r=reload, press any other key to cancel): ")
            return

        if force or not modified_externally:
            f = open(self.path, "wb")
            f.write(bytes(self.bytes))
            f.close()

            self.modified = False
            self.last_modification_time = os.path.getmtime(self.path)

            self.textEntryNotify(f"Wrote file {self.path}")

    # Terminal resize.
    def resize(self):
        self.terminal_size = self.scr.getmaxyx()

        min_rows = 24
        min_cols = 9 + (self.bytes_per_row * 4)
        min_cols = 100

        self.terminal_too_small = self.terminal_size[0] < min_rows or self.terminal_size[1] < min_cols

        self.handleCursor()

        self.scr.clear()

    # Focus.
    def executeFocus(self):
        self.draw()

        # Wait for key.
        self.key = self.scr.getkey()

        self.key_ord = 0
        if len(self.key) == 1:
            self.key_ord = ord(self.key)

        self.textEntryNotify()

        # Global keys.
        if self.focus != EditorFocus.EDIT_CAPTURE_KEY:
            if self.key == "\x03": # ^C.
                if self.modified:
                    self.pushFocus(EditorFocus.CONFIRM_EXIT, f"Save file {self.path}? (y=save and exit, n=exit without saving, press any other key to cancel): ")
                else:
                    self.is_alive = False
            elif self.key == "\x1b":
                raise EditorResetFocus
            elif self.key == "KEY_RESIZE":
                self.resize()

        self.focus_funcs[self.focus]()

    def pushFocus(self, focus, prompt=""):
        self.focus_stack.append(focus)
        self.focus = focus
        if focus == EditorFocus.EDIT_BYTES or focus == EditorFocus.EDIT_ASCII:
            self.last_edit_focus = focus

        self.text_prompt = prompt
        self.text_entry = ""

        self.textEntryNotify()

        self.search()

        while self.is_alive:
            try:
                # It's possible for the focus to change while still in
                # this loop!
                #
                # Be cautious of this when modifying this code.
                self.executeFocus()
            except EditorPopFocus:
                break
            except EditorReplaceFocus:
                pass

    def popFocus(self):
        if len(self.focus_stack) > 0:
            self.focus_stack.pop()

        if len(self.focus_stack) > 0:
            self.focus = self.focus_stack[-1]
            if self.focus == EditorFocus.EDIT_BYTES or self.focus == EditorFocus.EDIT_ASCII:
                self.last_edit_focus = self.focus
        else:
            self.focus = None

        self.text_prompt = ""
        self.text_entry = ""

        self.search()

        raise EditorPopFocus

    def replaceFocus(self, focus, prompt=""):
        if len(self.focus_stack) > 0:
            self.focus_stack[-1] = focus
            self.focus = focus
            if focus == EditorFocus.EDIT_BYTES or focus == EditorFocus.EDIT_ASCII:
                self.last_edit_focus = focus

        self.text_prompt = ""
        self.text_entry = ""

        self.textEntryNotify()

        raise EditorReplaceFocus

    # Text entry.
    def textEntryNotify(self, text=""):
        self.text_notify = text

    # Change scroll offset to stay onscreen, as well as preventing
    # underflow of certain values.q
    def handleCursor(self):
        if self.edit_byte_index < 0:
            self.edit_byte_index = 0

        if self.scroll_offset < 0:
            self.scroll_offset = 0

        self.edit_cursor_row = int(self.edit_byte_index / self.bytes_per_row)
        self.edit_cursor_col = self.edit_byte_index % self.bytes_per_row

        # This is relative to the byte entry region.
        dist_top = self.edit_cursor_row - self.scroll_offset
        dist_bottom  = dist_top - (self.terminal_size[0] - 5)

        if dist_top < 0:
            self.scroll_offset += dist_top
        elif dist_bottom > 0:
            self.scroll_offset += dist_bottom

    def cursorIncrement(self, number=1):
        self.edit_byte_index += number
        self.handleCursor()

    def cursorDecrement(self, number=1):
        self.edit_byte_index -= number
        self.handleCursor()

    def cursorJump(self, pos):
        self.edit_byte_index = pos
        self.handleCursor()

    # Editing.
    def insertByte(self, b):
        if b < 0 or b > 255:
            raise ValueError(f"{b} out of range 0,255")

        if self.edit_byte_index < len(self.bytes):
            if self.edit_overwrite:
                self.bytes[self.edit_byte_index] = b
            else:
                self.bytes.insert(self.edit_byte_index, b)
        else:
            for i in range(self.edit_byte_index - len(self.bytes)):
                self.bytes.append(0)
            self.bytes.append(b)

        self.cursorIncrement()

        self.modified = True

    def deleteByte(self):
        if self.edit_byte_index < len(self.bytes):
            if self.edit_overwrite:
                self.bytes[self.edit_byte_index] = 0
            else:
                del self.bytes[self.edit_byte_index]

            self.modified = True

    # Search.
    def search(self, bytes_=[]):
        self.search_results = []

        if len(bytes_) < 1:
            return

        match_bytes = 0
        match_first_index = 0
        for i in range(len(self.bytes)):
            if self.bytes[i] == bytes_[match_bytes]:
                if match_bytes == 0:
                    match_first_index = i

                match_bytes += 1

            if match_bytes >= len(bytes_):
                match_bytes = 0

                self.search_results.append([match_first_index, i])

    def getSearchResult(self, reverse=False):
        if reverse:
            for r in reversed(self.search_results):
                if r[0] < self.edit_byte_index:
                    return r[0]
        else:
            for r in self.search_results:
                if r[1] > self.edit_byte_index:
                    return r[1]

        return None

    # Drawing.
    def drawStatusline(self):
        text = " "

        # Filename.
        text += os.path.basename(self.path)
        if self.modified:
            text += "*"

        # Numerical base.
        text += f"  ({self.number_base.name.capitalize()})"

        # File size.
        text += f"  (Size 0x{len(self.bytes):x})"

        # Overwrite mode.
        if self.edit_overwrite:
            text += "  Overwrite"

        text += "  "

        self.scr.addstr(self.terminal_size[0] - 2, 0, "-" * self.terminal_size[1], curses.A_STANDOUT)
        self.scr.addstr(self.terminal_size[0] - 2, 0, text, curses.A_STANDOUT)

    def drawTextEntry(self):
        self.scr.addstr(self.terminal_size[0] - 1, 0, " " * (self.terminal_size[1] - 1))

        notify_len = len(self.text_notify)
        if notify_len > 0:
            notify_len += 1

        self.scr.addstr(self.terminal_size[0] - 1, 0, self.text_notify)

        if self.text_prompt:
            self.scr.addstr(self.terminal_size[0] - 1, notify_len, self.text_prompt, curses.color_pair(3))
        if self.text_entry:
            self.scr.addstr(self.terminal_size[0] - 1, notify_len + len(self.text_prompt), self.text_entry)

    def draw(self):
        if self.terminal_too_small:
            self.scr.clear()
            self.scr.addstr(0, 0, "Terminal is too small")
            return

        def getAttr(is_selected, is_ascii=None):
            if is_ascii == None:
                return curses.A_STANDOUT if is_selected else 0
            else:
                return curses.A_STANDOUT if is_selected and is_ascii == (self.last_edit_focus == EditorFocus.EDIT_ASCII) else 0

        # Draw address column header.
        for col in range(self.bytes_per_row):
            is_selected = col == self.edit_cursor_col

            self.scr.addstr(0, 8 + (col * 3), f"{col:1x} ", getAttr(is_selected, False))
            self.scr.addstr(0, 8 + (self.bytes_per_row * 3) + col, f"{col:1x}", getAttr(is_selected, True))

        # Address/byte separator.
        self.scr.hline(1, 0, curses.ACS_HLINE, (8 + (self.bytes_per_row * 3) + self.bytes_per_row + 1), curses.color_pair(1))

        # Separator joins.
        self.scr.addch(1, 7, curses.ACS_TTEE, curses.color_pair(1))
        self.scr.addch(1, 7 + (self.bytes_per_row * 3), curses.ACS_TTEE, curses.color_pair(1))
        self.scr.addch(1, 8 + (self.bytes_per_row * 4), curses.ACS_URCORNER, curses.color_pair(1))

        # Draw rows.
        byte_index = self.scroll_offset * self.bytes_per_row
        for row in range(self.terminal_size[0] - 4):
            byte_row = self.scroll_offset + row

            # Padding characters.
            self.scr.addch(row + 2, 7, curses.ACS_VLINE, curses.color_pair(1))
            self.scr.addch(row + 2, 7 + (self.bytes_per_row * 3), curses.ACS_VLINE, curses.color_pair(1))
            self.scr.addch(row + 2, 8 + (self.bytes_per_row * 4), curses.ACS_VLINE, curses.color_pair(1))

            # Address.
            self.scr.addstr(row + 2, 0, f"{byte_row:07x}", getAttr(byte_row == self.edit_cursor_row))

            # Bytes/ASCII.
            for col in range(self.bytes_per_row):
                is_selected = byte_index == self.edit_byte_index

                bytes_attr = getAttr(is_selected, False)
                ascii_attr = getAttr(is_selected, True)

                if byte_index < len(self.bytes):
                    b = self.bytes[byte_index]
                    c = chr(b)

                    for r in self.search_results:
                        if byte_index >= r[0] and byte_index <= r[1]:
                            bytes_attr |= curses.color_pair(4)
                            break

                    if c == " " or not curses.ascii.isprint(c):
                        ascii_attr |= curses.color_pair(2)
                        c = "."

                    self.scr.addstr(row + 2, 8 + (col * 3), f"{b:02x}", bytes_attr)
                    self.scr.addstr(row + 2, 8 + (self.bytes_per_row * 3) + col, c, ascii_attr)
                else:
                    self.scr.addstr(row + 2, 8 + (col * 3), "  ", bytes_attr)
                    self.scr.addstr(row + 2, 8 + (self.bytes_per_row * 3) + col, " ", ascii_attr)

                byte_index += 1

        # Debug.
        #self.scr.addstr(0, 80, f"Pressed: '{self.key}' {self.key_ord} 0x{self.key_ord:x}                    ")

        self.drawStatusline()
        self.drawTextEntry()

    def handleEditKeys(self):
        # Mode switching.
        if self.key == "\x02": # ^B.
            self.pushFocus(EditorFocus.SELECT_NUMBER_BASE, "Select numerical base (b=binary, o=octal, d=decimal, h=hexidecimal): ")
        elif self.key == "\x13": # ^S.
            self.pushFocus(EditorFocus.SEARCH, f"Search for bytes ({self.number_base.name.capitalize()}): ")
        elif self.key == "\x07": # ^G.
            self.pushFocus(EditorFocus.GOTO_BYTE, f"Goto byte ({self.number_base.name.capitalize()}): ")
        elif self.key == "\x12": # ^R.
            self.readFile()
        elif self.key == "\x17": # ^W.
            self.writeFile()

            # Cursor.
        elif self.key == "KEY_UP":
            if self.edit_byte_index >= self.bytes_per_row:
                self.cursorDecrement(self.bytes_per_row)
        elif self.key == "KEY_DOWN":
            self.cursorIncrement(self.bytes_per_row)
        elif self.key == "KEY_LEFT":
            self.cursorDecrement()
        elif self.key == "KEY_RIGHT":
            self.cursorIncrement()
        elif self.key == "KEY_PPAGE": # Pgup.
            self.scroll_offset -= self.terminal_size[0] - 4
            self.cursorDecrement(self.bytes_per_row * (self.terminal_size[0] - 4))
        elif self.key == "KEY_NPAGE": # Pgdn.
            self.scroll_offset += self.terminal_size[0] - 4
            self.cursorIncrement(self.bytes_per_row * (self.terminal_size[0] - 4))

            # Editing modes.
        elif self.key == "\t": # Tab.
            if self.focus == EditorFocus.EDIT_ASCII:
                self.replaceFocus(EditorFocus.EDIT_BYTES)
            else:
                self.replaceFocus(EditorFocus.EDIT_ASCII)
        elif self.key == "KEY_IC": # Insert.
            self.edit_overwrite = not self.edit_overwrite
        elif self.key == "\x11": # ^Q.
            self.pushFocus(EditorFocus.EDIT_CAPTURE_KEY, "Press a key to capture: ")

            # Data modification.
        elif self.key == "\x7f": # Backspace.
            self.text_entry = ""
            self.cursorDecrement()
            self.deleteByte()
        elif self.key == "KEY_DC": # Delete.
            self.text_entry = ""
            self.deleteByte()

        else:
            return False

        return True

    # Focus states.
    def focusEditBytes(self):
        if self.handleEditKeys():
            return

        mode = NUMBER_BASES[self.number_base]

        if self.key.lower() in mode["digits"]:
            self.text_entry += self.key
        elif self.key == " ": # Space clears any digits currently being entered.
            self.text_entry = ""

        # Finalize numerical byte entry.
        if (self.key == "\n" and len(self.text_entry) > 0) or len(self.text_entry) >= mode["max_length"]:
            self.insertByte(int(self.text_entry, mode["base"]))
            self.text_entry = ""

    def focusEditAscii(self):
        if self.handleEditKeys():
            return

        if self.key_ord and curses.ascii.isprint(self.key_ord):
            self.insertByte(self.key_ord)

    def focusEditCaptureKey(self):
        if self.key_ord:
            self.insertByte(self.key_ord)
        else:
            self.textEntryNotify("Captured key was unrecognized")

        self.popFocus()

    def focusSelectNumberBase(self):
        m = self.key.lower()
        if m == "b":
            self.number_base = EditorNumberBase.BINARY
        elif m == "o":
            self.number_base = EditorNumberBase.OCTAL
        elif m == "d":
            self.number_base = EditorNumberBase.DECIMAL
        elif m == "h":
            self.number_base = EditorNumberBase.HEXIDECIMAL
        else:
            self.textEntryNotify("Unrecognized numerical base")

        self.popFocus()

    def focusSearch(self):
        mode = NUMBER_BASES[self.number_base]

        reverse = False
        do_search = False

        if self.key.lower() in mode["digits"]:
            digits = 0
            for i in range(len(self.text_entry) - mode["max_length"], len(self.text_entry)):
                if i < 0 or self.text_entry[i] == " ":
                    break

                digits += 1

            if digits >= mode["max_length"]:
                self.text_entry += " "

            self.text_entry += self.key

            do_search = True
        elif self.key == "\x7f": # Backspace.
            if len(self.text_entry) > 0:
                self.text_entry = self.text_entry[:-1]
            if len(self.text_entry) > 0 and self.text_entry[-1] == " ":
                self.text_entry = self.text_entry[:-1]

            do_search = True
        elif self.key == " ":
            if len(self.text_entry) > 0 and self.text_entry[-1] != " ":
                self.text_entry += " "
        elif self.key == "\x12": # ^R.
            reverse = True
        elif self.key == "\n":
            self.text_entry = ""
            self.popFocus()

        # Attempt to find results with a given search term.
        if do_search:
            bytes_ = []
            for b in self.text_entry.split(" "):
                if len(b) < 1:
                    continue

                b = int(b, mode["base"])

                if b > 255:
                    self.textEntryNotify("Search term is invalid")
                    return
                else:
                    bytes_.append(b)

            self.search(bytes_)

        # Move cursor to next (or previous) search result.
        pos = self.getSearchResult(reverse=reverse)
        if pos == None:
            self.textEntryNotify("No matches")
        else:
            self.textEntryNotify()
            self.cursorJump(pos)

    def focusGotoByte(self):
        mode = NUMBER_BASES[self.number_base]

        if self.key.lower() in mode["digits"]:
            self.text_entry += self.key
        elif self.key == "\x7f": # Backspace.
            self.text_entry = self.text_entry[:-1]
        elif self.key == "\n":
            self.cursorJump(int(self.text_entry, mode["base"]))
            self.popFocus()

    def focusConfirmExit(self):
        m = self.key.lower()
        if m == "y":
            self.writeFile()
            self.is_alive = False
        elif m == "n":
            self.is_alive = False
        else:
            self.popFocus()

    def focusConfirmReadFile(self):
        m = self.key.lower()
        if m == "y":
            self.readFile(force=True)

        self.popFocus()

    def focusConfirmWriteFile(self):
        m = self.key.lower()
        if m == "y":
            self.writeFile(force=True)
        elif m == "r":
            self.readFile()

        self.popFocus()

    def main(self):
        while self.is_alive:
            try:
                self.pushFocus(EditorFocus.EDIT_BYTES)
            except EditorResetFocus:
                pass

if __name__ == "__main__":
    if len(sys.argv) < 2:
        print("Usage: hecks FILE")
        exit(0)

    ed = Editor(sys.argv[1])

    try:
        ed.main()
    except Exception as e:
        ed.deinit()
        traceback.print_tb(e.__traceback__)
        exit(1)

    ed.deinit()
